@page "/fetchdata"
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecast == null)
{
    <p><em>Loading...</em></p>
}
else
{
    var today = DateTime.Today;
    <h4>Today: @today.ToShortDateString()</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Temp</th>
                <th>Tempmin</th>
                <th>Description</th>
                <th>Windspeed</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecast.Days)
            {
                <tr>
                    <td>@forecast.Temp</td>
                    <td>@forecast.Tempmin</td>
                    <td>@forecast.Description</td>
                    <td>@forecast.Windspeed</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    //Declaring an array of forecasts, where our results from the API call will be stored
    private WeatherForecast? forecast;

    //When this component is initialised, an asyncronous call is made to the whether JSON file (sanple data whether)
    protected override async Task OnInitializedAsync()
    {
        //HTTP client is initialised with the same base URL as our app (HostEnvironment.BaseAddress in Program.cs)
        forecast = await Http.GetFromJsonAsync<WeatherForecast>("Berlin");
    }

    public partial class WeatherForecast : Days
    {
        public string? ResolvedAddress { get; set; }
        public string? Address { get; set; }
        public string? Timezone { get; set; }
        public Days[]? Days { get; set; }
    }

    public class Days
    {
        public string? Temp { get; set; }
        public string? Tempmin { get; set; }
        public string? Feelslikemax { get; set; }
        public string? Feelslikemin { get; set; }
        public string? Description { get; set; }
        public string? Windspeed { get; set; }

    }
}
